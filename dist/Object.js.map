{"version":3,"sources":["../src/Object.js"],"names":["key","init","setField","RegExp","clearField","setObj","mergeObj","clearObj","state","action","type","Object","assign","m","match","field","update","c","s"],"mappings":";;;;;;kBAAe,UAACA,GAAD,EAAkB;AAAA,MAAZC,IAAY,uEAAP,EAAO;;AAC/B,MAAMC,WAAWC,OAAO,SAASH,GAAT,GAAe,UAAtB,CAAjB;AACA,MAAMI,aAAaD,OAAO,WAAWH,GAAX,GAAiB,UAAxB,CAAnB;AACA,MAAMK,kBAAgBL,GAAtB;AACA,MAAMM,sBAAoBN,GAA1B;AACA,MAAMO,sBAAoBP,GAA1B;AACA,SAAO,YAAwB;AAAA,QAAvBQ,KAAuB,uEAAjBP,IAAiB;AAAA,QAAXQ,MAAW;;AAC7B,QAAGA,OAAOC,IAAP,KAAgBL,MAAnB,EAA2B;AACzB,aAAOM,OAAOC,MAAP,CAAe,EAAf,EAAmBH,OAAOT,GAAP,CAAnB,CAAP;AACD;;AAED,QAAGS,OAAOC,IAAP,KAAgBJ,QAAnB,EAA6B;AAC3B,aAAOK,OAAOC,MAAP,CAAe,EAAf,EAAmBJ,KAAnB,EAA0BC,OAAOT,GAAP,CAA1B,CAAP;AACD;;AAED,QAAGS,OAAOC,IAAP,IAAeH,QAAlB,EAA4B;AAC1B,aAAON,IAAP;AACD;;AAED,QAAIY,IAAIJ,OAAOC,IAAP,CAAYI,KAAZ,CAAkBZ,QAAlB,CAAR;AACA,QAAGW,CAAH,EAAM;AACJ,UAAIE,QAAQF,EAAE,CAAF,CAAZ;AACA,UAAIG,SAAS,EAAb;AACAA,aAAOD,KAAP,IAAgBN,OAAOM,KAAP,CAAhB;AACA,aAAOJ,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBQ,MAAzB,CAAP;AACD;;AAED,QAAIC,IAAIR,OAAOC,IAAP,CAAYI,KAAZ,CAAkBV,UAAlB,CAAR;AACA,QAAGa,CAAH,EAAM;AACJ,UAAIF,SAAQE,EAAE,CAAF,CAAZ;AACA,UAAIC,IAAIP,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,CAAR;AACA,aAAOU,EAAEH,MAAF,CAAP;AACA,aAAOG,CAAP;AACD;;AAED,WAAOV,KAAP;AACD,GA9BD;AA+BD,C","file":"Object.js","sourcesContent":["export default (key, init={}) => {\n  const setField = RegExp(\"set \" + key + \" (\\\\w*)$\");\n  const clearField = RegExp(\"clear \" + key + \" (\\\\w*)$\");\n  const setObj = `set ${key}`\n  const mergeObj = `merge ${key}`\n  const clearObj = `clear ${key}`\n  return (state=init, action) => {\n    if(action.type === setObj) {\n      return Object.assign( {}, action[key] )\n    }\n\n    if(action.type === mergeObj) {\n      return Object.assign( {}, state, action[key] )\n    }\n\n    if(action.type == clearObj) {\n      return init\n    }\n\n    let m = action.type.match(setField)\n    if(m) {\n      let field = m[1]\n      var update = {}\n      update[field] = action[field]\n      return Object.assign({}, state, update)\n    }\n\n    let c = action.type.match(clearField)\n    if(c) {\n      let field = c[1]\n      var s = Object.assign({}, state)\n      delete s[field]\n      return s\n    }\n\n    return state\n  }\n}\n"]}